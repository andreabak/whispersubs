[project]
name = "whispersubs"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = 'Transcribe audio/video files into subtitles'
readme = "README.md"
requires-python = ">=3.8"
license = { text = "LGPL-3.0" }
keywords = ["transcription", "subtitles", "audio", "video", "whisper"]
authors = [
  { name = "abk16", email = "and.theunnamed@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]

[project.urls]
Homepage = "https://github.com/andreabak/whispersubs"
Documentation = "https://github.com/andreabak/whispersubs#readme"
Issues = "https://github.com/andreabak/whispersubs/issues"
Source = "https://github.com/andreabak/whispersubs"

[project.scripts]
whispersubs = "whispersubs.__main__:main"

[build-system]
requires = ["hatchling", "hatch-requirements-txt", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
cuda = ["requirements-cuda.txt"]
dev = ["requirements-dev.txt"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "whispersubs/_version.py"

[tool.hatch.build.targets.sdist]
include = [
  "whispersubs",
]

[tool.ruff]
fix = true
show-fixes = true
preview = true
line-length = 100

[tool.ruff.lint]
ignore-init-module-imports = true
select = [
  # entire rule-sets
  "F",       # PyFlakes
  "E",       # pycodestyle errors
  "W",       # pycodestyle warnings
  "I",       # isort
  "N",       # PEP8 naming
  "D",       # PyDocStyle
  "UP",      # PyUpgrade
  "ASYNC",   # flake8-async
  "S",       # flake8-bandit
  "BLE",     # flake8-blind-except
  "FBT",     # flake8-boolean-trap
  "B",       # flake8-bugbear
  "C4",      # flake8-comprehensions
  "DTZ",     # flake8-datetimez
  "T10",     # flake8-debugger
  "EXE",     # flake8-executable
  "ICN",     # flake8-import-conventions
  "PIE",     # flake8-pie
  "T20",     # flake8-print
  "PT",      # flake8-pytest-style
  "Q",       # flake8-quotes
  "RSE",     # flake8-raise
  "RET",     # flake8-return
  "SLF",     # flake8-self
  "SLOT",    # flake8-slots
  "SIM",     # flake8-simplify
  "TID",     # flake8-tidy-imports
  "TCH",     # flake8-type-checking
  "INT",     # flake8-gettext
  "ARG",     # flake8-unused-arguments
  "PTH",     # flake8-use-pathlib
  "TD",      # flake8-todos
  "FIX",     # flake8-fixme
  "ERA",     # flake8-eradicate
  "PGH",     # flake8-pygrep-hooks
  "PL",      # Pylint
  "TRY",     # tryceratops
  "FLY",     # flynt
  "PERF",    # perflint
  "FURB",    # refurb
  "LOG",     # flake8-logging
  "RUF",     # ruff-specific-rules

  # explicit rules
  "G010",    # logging statement uses `warn` instead of `warning`
  "G101",    # logging statement uses an `extra` field that clashes with LogRecord
  "G201",    # `logging.exception` should be used instead of `logging.error(..., exc_info=True)`
  "G202",    # logging statement has redundant `exc_info`
  "ISC003",  # explicitly concatenated string should be implicitly concatenated
]
ignore = [
  "ARG002",   # unused method argument
  "ARG003",   # unused class method argument
  "B904",     # use `raise from` within except
  "C408",     # unnecessary dict call - rewrite as a literal
  "D105",     # missing docstring in magic method
  "D107",     # missing docstring in __init__
  "D203",     # 1 blank line required before class docstring
  "D205",     # 1 blank line required between summary line and description
  "D212",     # multi-line docstring summary should start at the first line
  "F403",     # `from module import *` used; unable to detect undefined names
  "FBT003",   # boolean positional value in function call
  "N816",     # variable in global scope should not be mixedCase
  "N818",     # exception should be named with an `Error` suffix
  "PLW0602",  # `global` for variable but no assignment
  "PT018",    # assertions should be broken down into multiple parts
  "PTH123",   # open() should be replaced by Path.open()
  "RET505",   # unnecessary else/elif after return statement
  "S101",     # use of assert detected
  "S307",     # usage of builtin `eval()`
  "S311",     # cryptographic usage of `random` module
  "S320",     # usage of `lxml`
  "S404",     # usage of `subprocess` module
  "S603",     # subprocess call - check for execution of untrusted input
  "SIM105",   # prefer `contextlib.suppress` over `try/except/pass`
  "TD001",    # invalid TODO tags
  "TD002",    # author name in TODOs
  "TD003",    # issue link in TODOs
  "TRY003",   # long message in exception call
  "TRY301",   # raise within try - abstract raise to an inner function
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D", "S", "T", "SLF001", "PLR2004", "PLR6301"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-line-length = 120

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.lint.pylint]
max-args = 10
max-bool-expr = 8
max-branches = 20
max-returns = 8
max-public-methods = 25
max-statements = 70

[tool.mypy]
show_error_codes = true
ignore_missing_imports = true
warn_return_any = true
allow_redefinition = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
plugins = ["numpy.typing.mypy_plugin"]
